package fr.ul.miage;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Scanner;

import io.github.cdimascio.dotenv.Dotenv;

public class Exploitant {

    public Exploitant(int idExploitant) {
        this.idExploitant = idExploitant;
    }


    static Dotenv dotenv = Dotenv.configure().load();
    private static Connection co = DatabaseConnection.dbco(dotenv.get("MYSQL_STRING"),dotenv.get("USER"), dotenv.get("PASSWORD"));
    private String pseudo;
    private String mdp;
    private int idExploitant;

    public int getIdExploitant() {
        return idExploitant;
    }
    public void setIdExploitant(int idExploitant) {
        this.idExploitant = idExploitant;
    }
    
    public String getPseudo() {
        return pseudo;
    }
    public void setPseudo(String pseudo) {
        this.pseudo = pseudo;
    }
    public Exploitant(String pseudo, String mdp, int idExploitant) {
        this.pseudo = pseudo;
        this.mdp = mdp;
        this.idExploitant = idExploitant;
    }
    public String getMdp() {
        return mdp;
    }
    public void setMdp(String mdp) {
        this.mdp = mdp;
    }
    

    public static int getExploitantIdByPseudo(String pseudo){
        String query = "SELECT idClient FROM client WHERE pseudo = (?)";
        int idExploitant = 0;
        try {
            PreparedStatement pstate = co.prepareStatement(query);
            ResultSet rs = pstate.executeQuery();
            if(rs.next()){
                idExploitant = rs.getInt(1);
            }
        } catch (Exception e) {
            System.out.println("Impossible de récupérer l'exploitant");
        }
        return idExploitant;
    }

    public void menu_exploitant(){
        boolean quitter = false;
        boolean quitter2 = false;
        Scanner sc = new Scanner(System.in);
        while(!quitter) {
            System.out.println("Modifier la table des frais (1) Afficher le profil d'un client via son mail (2)");
            int choice = sc.nextInt();
            switch (choice) {  
                case 1:
                    System.out.println("Voici l'état actuel de la table des frais");
                    HashMap<String,Integer> tableFrais = checkTableFrais();
                    System.out.println(tableFrais);
                    System.out.println("Modifier frais de réservation (1) Modifier frais de depassement (2) Modifier frais de non présence (3) Quitter(4)");
                    int choice2 = sc.nextInt();
                    switch(choice2){
                        case 1:
                            String libelle = "frais_reserve";
                            System.out.println("Saisir une nouvelle valeur");
                            int nvFraisReserv = sc.nextInt();
                            updateTableFrais(libelle, nvFraisReserv);   
                        break;

                        case 2:
                            String libelle2 = "frais_depassement";
                            System.out.println("Saisir une nouvelle valeur");
                            int nvFraisDepassement = sc.nextInt();
                            updateTableFrais(libelle2, nvFraisDepassement);
                        break;

                        case 3:
                            String libelle3 = "frais_non_pres";
                            System.out.println("Saisir une nouvelle valeur");
                            int nvFraisNonPres = sc.nextInt(); 
                            updateTableFrais(libelle3, nvFraisNonPres);

                        break;
                        case 4:
                        quitter2 = true;
                        break;
                    }
                break;

                case 2:
                    System.out.println("Saisir le mail d'un client");
                    String mail = sc.next();
                    Client c = afficherProfil(mail);
                    System.out.println(c.toString());
                    c.toString();
                break;



        }
    }
}

    public Client afficherProfil(String mail){
        String queryCLient = "SELECT * FROM client WHERE mail = (?)";
        Client c = null;
        try {
            PreparedStatement pstate = co.prepareStatement(queryCLient);
            pstate.setString(1, mail);
            ResultSet rs = pstate.executeQuery();
            if(rs.next()){
                c = new Client(rs.getInt(1),rs.getString(2),rs.getString(3),rs.getString(4),rs.getString(5),rs.getInt(6),
                + rs.getInt(7),rs.getString(8),rs.getString(9),rs.getInt(10),rs.getInt(11));
            }
        } catch (Exception e) {
            System.out.println("Impossible de récupérer le profil");
        }
        return c;
        
    }

    public void updateTableFrais(String libelle, int valeur){
        String queryUpdate1 = "UPDATE frais SET " + libelle + " = (?)";
        try {
            PreparedStatement pstate = co.prepareStatement(queryUpdate1);
            pstate.setInt(1, valeur);
            pstate.execute();
        } catch (Exception e) {
            System.out.println("Impossible de mettre à jour les frais");
        }


    }

    public HashMap<String,Integer> checkTableFrais(){
        HashMap<String,Integer> mapTable= new HashMap<String,Integer>();
        int fraisReser = 0;
        int fraisDepass = 0;
        int fraisNonPresence = 0;
        String queryTableFrais = "SELECT * from frais";
        try {
            PreparedStatement pstate = co.prepareStatement(queryTableFrais);
            ResultSet rs = pstate.executeQuery();
            if(rs.next()){
                fraisReser = rs.getInt(1);
                fraisDepass = rs.getInt(2);
                fraisNonPresence = rs.getInt(3);
            }
        } catch (Exception e) {
            System.out.println("Impossible de récupérer les frais");
        }
        mapTable.put("Frais de réservation", fraisReser);
        mapTable.put("Frais de dépassement", fraisDepass);
        mapTable.put("Frais de non présence",fraisNonPresence);

        return mapTable;

        
    }
}
